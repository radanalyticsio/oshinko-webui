sudo: required
dist: trusty
language: node_js
node_js:
    - "6"
## home folder is /home/travis/radanalyticsio/oshinko-webui
services:
- docker
addons:
  apt:
    packages:
      - net-tools
matrix:
  # no need to include the build target at present because the template
  # tests perform builds from the local source to do the tests
  include:
    - env: TO_TEST=secure
    - env: TO_TEST=standard
fast_finish: true
before_install:
## add insecure-registry and restart docker
  - pwd
  - ls -l
  - bash --version
  - sudo apt-get install --only-upgrade bash
  - bash --version
  - sudo cat /etc/default/docker
  - sudo service docker stop
  - sudo sed -i -e 's/sock/sock --insecure-registry 172.30.0.0\/16/' /etc/default/docker
  - sudo cat /etc/default/docker
  - sudo service docker start
  - sudo service docker status
## chmod needs sudo, so all other commands are with sudo
  - sudo mkdir -p /home/travis/origin
  - sudo chmod -R 766 /home/travis/origin
## download oc 3.6.0 binary
  - export OC_VERSION=v3.6.0
  - export OC_DOWNLOAD_PREFIX=openshift-origin-client-tools-v3.6.0-c4dd4cf
  - sudo wget https://github.com/openshift/origin/releases/download/$OC_VERSION/$OC_DOWNLOAD_PREFIX-linux-64bit.tar.gz -P /home/travis/origin
  - sudo ls -l /home/travis/origin
  - sudo tar -C /home/travis/origin -xvzf /home/travis/origin/$OC_DOWNLOAD_PREFIX-linux-64bit.tar.gz
  - sudo ls -l /home/travis/origin/$OC_DOWNLOAD_PREFIX-linux-64bit
  - sudo cp /home/travis/origin/$OC_DOWNLOAD_PREFIX-linux-64bit/oc /home/travis/origin
  - sudo chmod -R 766 /home/travis/origin
  - sudo ls -l /home/travis/origin
  - sudo chmod -R +755 /home/travis/origin/*
  - sudo cp /home/travis/origin/oc /bin
  - sudo ls -l /bin
  - oc version
  - export PATH=$PATH:/home/travis/origin/
  - echo $PATH
  - ip addr show eth0
  - export HOST_IP_ADDRESS="$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)"
  - echo "Host IP is $HOST_IP_ADDRESS"
## below cmd is important to get oc working in ubuntu
  - sudo docker run -v /:/rootfs -ti --rm --entrypoint=/bin/bash --privileged openshift/origin:v3.6.0 -c "mv /rootfs/bin/findmnt /rootfs/bin/findmnt.backup"
  - sudo oc cluster up --host-config-dir=/home/travis/origin --public-hostname=$HOST_IP_ADDRESS
  - sudo chmod -R a+rwX /home/travis/.kube
  - sudo ls -l /home/travis/origin
## find IP:PORT of openshift
  - IPSTR=`sudo oc status |grep server`
  - echo $IPSTR
  - IP=${IPSTR##*/}
  - echo ${IP}
  - IPSTR=`sudo oc login -u developer -p test`
  - echo $IPSTR
  - echo "****Building oshinko-webui docker image****"
  - docker build -t oshinko-webui .
  - oc login -u system:admin > /dev/null
  - oc project default > /dev/null 2>&1
## Getting local docker registry so that we can push our freshly built image into it for use
  - export REGIP=`oc get service docker-registry --template='{{index .spec.clusterIP}}:{{index .spec.ports 0 "port"}}'`
  - echo "***Found docker-registry at $REGIP***"
  - oc login -u developer -p test
  - oc project myproject
  - wget https://raw.githubusercontent.com/radanalyticsio/radanalyticsio.github.io/master/resources.yaml -O master_resources.yaml
  - echo `pwd`
  - |
    diff master_resources.yaml tools/resources.yaml
    if [ "$?" -eq 0 ]; then
      echo "No change in resources.yaml, using radanalyticsio master resources.yaml"
      oc create -f master_resources.yaml
    else
      echo "local resources.yaml has changed, using local resources.yaml"
      oc create -f tools/resources.yaml
    fi
  - echo "My token is set to-  $(oc whoami -t)"
  - oc policy add-role-to-user admin system:serviceaccount:myproject:oshinko -n myproject
  - r=1; while [ $r -ne 0 ]; do docker login -u oshinko -p $(oc whoami -t) $REGIP ; r=$? ; sleep 1 ; done
  - docker tag oshinko-webui $REGIP/myproject/oshinko-webui
  - docker push $REGIP/myproject/oshinko-webui
  - docker pull docker.io/radanalyticsio/openshift-spark
  - |
    if [ "$TO_TEST" = "secure" ]; then
      oc new-app --template=oshinko-webui-secure -p OSHINKO_WEB_IMAGE=$REGIP/myproject/oshinko-webui
    else
      oc new-app --template=oshinko-webui -p OSHINKO_WEB_IMAGE=$REGIP/myproject/oshinko-webui
    fi
  - oc create configmap storedconfig --from-literal=mastercount=1 --from-literal=workercount=4
install:
  - npm install
  - bower install
  - npm install -g protractor
  - npm install -g karma-cli
before_script:
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start
  - webdriver-manager update
  - webdriver-manager start &
script:
  - echo "Running integration tests via protracor"
  - export IMAGETESTED=`oc get pods -l app=oshinko-webui --template="{{range .items}}{{range .spec.containers}}{{.image}}{{end}}{{end}}"`
  - echo "Testing image $IMAGETESTED"
  - |
      if [ "$TO_TEST" = "secure" ]; then
        export TESTROUTE=`oc get route oshinko-web-oaproxy --template='{{.spec.host}}'`
      else
        export TESTROUTE=`oc get route oshinko-web --template='{{.spec.host}}'`
      fi
  - echo TESTROUTE is $TESTROUTE
  - echo "Waiting for proxy to come up"
  - |
      if [ "$TO_TEST" = "secure" ]; then
        while [ 1 ]; do wget --no-check-certificate https://$TESTROUTE/proxy/api ; if [ $? = 0 ]; then break; fi; sleep 20s; done
      else
        while [ 1 ]; do wget  http://$TESTROUTE/proxy/api ; if [ $? = 0 ]; then break; fi; sleep 20s; done
      fi
  - cat api && rm api
  - echo "Make sure that webui is up"
  - export WEBCLUSTERIP=`oc get svc oshinko-web -o=go-template --template='{{.spec.clusterIP}}'`
  - while [ 1 ]; do wget http://$WEBCLUSTERIP:8080/webui ; if [ $? = 0 ]; then break; fi; sleep 20s; done
  - cat webui  && rm webui
  - echo "Other environment details"
  - echo "ENVIRONMENT IS:"
  - env
  - echo "ROUTES"
  - oc get routes
  - echo "SERVICES"
  - oc get services
  - echo "Protractor version is:"
  - protractor --version
  - |
      if [ "$TO_TEST" = "secure" ]; then
        protractor test/conf.js --baseUrl="https://$TESTROUTE/webui" --specs=test/spec/all-functionality.js
      else
        protractor test/conf.js --baseUrl="http://$TESTROUTE/webui" --specs=test/spec/all-functionality-insecure.js
      fi
## uncomment the following 3 lines for debugging purposes
#  - export PODNAME=`oc get pods --template='{{range .items}}{{.metadata.name}}{{end}}'`
#  - oc logs pod/$PODNAME -c oshinko-web
#  - oc logs pod/$PODNAME -c oauth-proxy
notifications:
 email:
   on_success: never
on_failure: never
